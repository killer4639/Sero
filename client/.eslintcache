[{"/home/shivagupta/drive/coding/webd/sero/Sero/client/src/index.js":"1","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/store.js":"2","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/App.js":"3","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/reducers/cartReducers.js":"4","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/reducers/eateryReducers.js":"5","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/reducers/orderReducer.js":"6","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/reducers/userReducers.js":"7","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Components/Footer.js":"8","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Components/Header.js":"9","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Screens/Home.js":"10","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Screens/Menu.js":"11","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Screens/Login.js":"12","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Screens/Checkout.js":"13","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Screens/Cart.js":"14","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Screens/Register.js":"15","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Screens/Feedback.js":"16","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Screens/Payment.js":"17","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Screens/UserList.js":"18","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Screens/Dashboard.js":"19","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Screens/DashboardMenu.js":"20","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Screens/EateryList.js":"21","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Screens/UserEdit.js":"22","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Screens/MyOrderList.js":"23","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Screens/EateryEdit.js":"24","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Screens/OrderSummary.js":"25","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Components/Eatery.js":"26","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Components/Loader.js":"27","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Components/Message.js":"28","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Components/Category.js":"29","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Components/FormContainer.js":"30","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/constants/cartConstants.js":"31","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/constants/eateryConstants.js":"32","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/constants/orderConstants.js":"33","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/constants/userConstants.js":"34","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/actions/userActions.js":"35","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/actions/eateryActions.js":"36","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/actions/orderActions.js":"37","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Components/CheckoutSteps.js":"38","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Components/Review.js":"39","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/actions/cartActions.js":"40","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Components/Item.js":"41"},{"size":327,"mtime":1628065137429,"results":"42","hashOfConfig":"43"},{"size":2781,"mtime":1628065137432,"results":"44","hashOfConfig":"43"},{"size":2308,"mtime":1628065137363,"results":"45","hashOfConfig":"43"},{"size":2796,"mtime":1628065137430,"results":"46","hashOfConfig":"43"},{"size":3644,"mtime":1628065137431,"results":"47","hashOfConfig":"43"},{"size":4699,"mtime":1628065137431,"results":"48","hashOfConfig":"43"},{"size":3785,"mtime":1628065137432,"results":"49","hashOfConfig":"43"},{"size":2587,"mtime":1628065137366,"results":"50","hashOfConfig":"43"},{"size":3727,"mtime":1628065137377,"results":"51","hashOfConfig":"43"},{"size":5095,"mtime":1628065137413,"results":"52","hashOfConfig":"43"},{"size":4792,"mtime":1628839445372,"results":"53","hashOfConfig":"43"},{"size":2422,"mtime":1628065137413,"results":"54","hashOfConfig":"43"},{"size":4333,"mtime":1628065137381,"results":"55","hashOfConfig":"43"},{"size":5662,"mtime":1628065137381,"results":"56","hashOfConfig":"43"},{"size":4304,"mtime":1628065137416,"results":"57","hashOfConfig":"43"},{"size":1985,"mtime":1628065137412,"results":"58","hashOfConfig":"43"},{"size":7822,"mtime":1628065137415,"results":"59","hashOfConfig":"43"},{"size":3370,"mtime":1628065137417,"results":"60","hashOfConfig":"43"},{"size":13753,"mtime":1630655883764,"results":"61","hashOfConfig":"43"},{"size":10275,"mtime":1628927351587,"results":"62","hashOfConfig":"43"},{"size":4815,"mtime":1628065137411,"results":"63","hashOfConfig":"43"},{"size":5723,"mtime":1628065137416,"results":"64","hashOfConfig":"43"},{"size":3192,"mtime":1628065137414,"results":"65","hashOfConfig":"43"},{"size":12269,"mtime":1628065137382,"results":"66","hashOfConfig":"43"},{"size":13357,"mtime":1628065137415,"results":"67","hashOfConfig":"43"},{"size":1595,"mtime":1628838466178,"results":"68","hashOfConfig":"43"},{"size":479,"mtime":1628065137378,"results":"69","hashOfConfig":"43"},{"size":304,"mtime":1628065137378,"results":"70","hashOfConfig":"43"},{"size":1486,"mtime":1628065137364,"results":"71","hashOfConfig":"43"},{"size":346,"mtime":1628065137376,"results":"72","hashOfConfig":"43"},{"size":264,"mtime":1628065137428,"results":"73","hashOfConfig":"43"},{"size":1508,"mtime":1628065137428,"results":"74","hashOfConfig":"43"},{"size":2006,"mtime":1628065137428,"results":"75","hashOfConfig":"43"},{"size":1515,"mtime":1628065137429,"results":"76","hashOfConfig":"43"},{"size":7893,"mtime":1628065137418,"results":"77","hashOfConfig":"43"},{"size":5868,"mtime":1628854875808,"results":"78","hashOfConfig":"43"},{"size":7001,"mtime":1628065137418,"results":"79","hashOfConfig":"43"},{"size":1294,"mtime":1628065137365,"results":"80","hashOfConfig":"43"},{"size":1970,"mtime":1628065137379,"results":"81","hashOfConfig":"43"},{"size":1414,"mtime":1628065137417,"results":"82","hashOfConfig":"43"},{"size":3609,"mtime":1628065137377,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"zvhy71",{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"86"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"86"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"86"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"86"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"86"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"86"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"86"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"86"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"86"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"86"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"86"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"86"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"86"},"/home/shivagupta/drive/coding/webd/sero/Sero/client/src/index.js",[],["180","181"],"/home/shivagupta/drive/coding/webd/sero/Sero/client/src/store.js",[],"/home/shivagupta/drive/coding/webd/sero/Sero/client/src/App.js",["182"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './bootstrap.min.css';\r\nimport './index.css';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport { Container } from 'react-bootstrap';\r\nimport Header from './Components/Header';\r\nimport Footer from './Components/Footer';\r\nimport Home from './Screens/Home';\r\nimport Menu from './Screens/Menu';\r\nimport Cart from './Screens/Cart';\r\nimport Login from './Screens/Login';\r\nimport Register from './Screens/Register'\r\nimport Checkout from './Screens/Checkout';\r\nimport Payment from './Screens/Payment';\r\nimport Dashboard from './Screens/Dashboard';\r\nimport Feedback from './Screens/Feedback';\r\nimport DashboardMenu from './Screens/DashboardMenu';\r\nimport UserList from './Screens/UserList';\r\nimport UserEdit from './Screens/UserEdit';\r\nimport EateryList from './Screens/EateryList';\r\nimport EateryEdit from './Screens/EateryEdit';\r\nimport OrderSummary from './Screens/OrderSummary';\r\nimport MyOrderList from './Screens/MyOrderList';\r\nfunction App() {\r\n\r\n    return (\r\n      <Router>\r\n\r\n        <Header />\r\n\r\n        <main>\r\n\r\n          <Route path='/' component={Home} exact />\r\n\r\n          <Container>\r\n            <Route path = '/login' component={Login} />\r\n            <Route path = '/register' component={Register} />\r\n            <Route path = '/dashboard' component={Dashboard} />\r\n            <Route path = '/dashboardMenu' component={DashboardMenu} />\r\n            <Route path = '/menu/:id' component={Menu} exact />\r\n            <Route path = '/cart' component={Cart} />\r\n            <Route path = '/checkout' component={Checkout} />\r\n            <Route path = '/payment' component={Payment} />\r\n            <Route path = '/orderSummary/:id' component={OrderSummary} />\r\n            <Route path = '/myorders' component={MyOrderList} />\r\n            <Route path = '/feedback' component={Feedback} />\r\n            <Route path = '/admin/userlist' component={UserList} />\r\n            <Route path = '/admin/user/:id/edit' component={UserEdit} />\r\n            <Route path = '/admin/eatery/:id/edit' component={EateryEdit} />\r\n            <Route path = '/admin/eaterylist' component={EateryList} />\r\n          </Container>\r\n        </main>\r\n\r\n        <Footer />\r\n\r\n      </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/reducers/cartReducers.js",[],"/home/shivagupta/drive/coding/webd/sero/Sero/client/src/reducers/eateryReducers.js",[],"/home/shivagupta/drive/coding/webd/sero/Sero/client/src/reducers/orderReducer.js",["183"],"import { ORDER_CANCEL_FAIL, ORDER_CANCEL_REQUEST, ORDER_CANCEL_RESET, ORDER_CANCEL_SUCCESS, ORDER_CREATE_FAIL, ORDER_CREATE_REQUEST, ORDER_CREATE_RESET, ORDER_CREATE_SUCCESS, ORDER_COMPLETED_FAIL, ORDER_COMPLETED_REQUEST, ORDER_COMPLETED_RESET, ORDER_COMPLETED_SUCCESS, ORDER_DETAILS_FAIL, ORDER_DETAILS_REQUEST, ORDER_DETAILS_SUCCESS, ORDER_LIST_MY_FAIL, ORDER_LIST_MY_REQUEST, ORDER_LIST_MY_RESET, ORDER_LIST_MY_SUCCESS, ORDER_PAY_FAIL, ORDER_PAY_REQUEST, ORDER_PAY_RESET, ORDER_PAY_SUCCESS, ORDER_PAYMENT_DONE_SUCCESS, ORDER_PAYMENT_DONE_REQUEST, ORDER_PAYMENT_DONE_FAIL, ORDER_PAYMENT_DONE_RESET, ORDER_EDIT_REQUEST, ORDER_EDIT_SUCCESS, ORDER_EDIT_FAIL, ORDER_EDIT_RESET } from \"../constants/orderConstants\"\r\n\r\n  \r\n  export const orderCreateReducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n      case ORDER_CREATE_REQUEST:\r\n        return { loading: true }\r\n      case ORDER_CREATE_SUCCESS:\r\n        return { loading: false, success: true, order: action.payload }\r\n      case ORDER_CREATE_FAIL:\r\n        return { loading: false, error: action.payload }\r\n      case ORDER_CREATE_RESET:\r\n        return {}\r\n      default:\r\n        return state\r\n    }\r\n}\r\n\r\nexport const orderEditReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case ORDER_EDIT_REQUEST:\r\n      return { loading: true }\r\n    case ORDER_EDIT_SUCCESS:\r\n      return { loading: false, success: true, order: action.payload }\r\n    case ORDER_EDIT_FAIL:\r\n      return { loading: false, error: action.payload }\r\n    case ORDER_EDIT_RESET:\r\n      return {}\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const orderDetailsReducer = (\r\n  state = { loading: true, orderItems: [], customerMeta: {} },\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case ORDER_DETAILS_REQUEST:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      }\r\n    case ORDER_DETAILS_SUCCESS:\r\n      return {\r\n        loading: false,\r\n        order: action.payload,\r\n      }\r\n    case ORDER_DETAILS_FAIL:\r\n      return {\r\n        loading: false,\r\n        error: action.payload,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const orderListMyReducer = (state = { orders: [] }, action) => {\r\n  switch (action.type) {\r\n    case ORDER_LIST_MY_REQUEST:\r\n      return {\r\n        loading: true,\r\n      }\r\n    case ORDER_LIST_MY_SUCCESS:\r\n      return {\r\n        \r\n        loading: false,\r\n        orders: action.payload,\r\n      }\r\n    case ORDER_LIST_MY_FAIL:\r\n      return {\r\n        loading: false,\r\n        error: action.payload,\r\n      }\r\n    case ORDER_LIST_MY_RESET:\r\n      return { orders: [] }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const orderPayReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case ORDER_PAY_REQUEST:\r\n      return {\r\n        loading: true,\r\n      }\r\n    case ORDER_PAY_SUCCESS:\r\n      return {\r\n        order: action.payload,\r\n        loading: false,\r\n        success: true,\r\n      }\r\n    case ORDER_PAY_FAIL:\r\n      return {\r\n        loading: false,\r\n        error: action.payload,\r\n      }\r\n    case ORDER_PAY_RESET:\r\n      return {}\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const orderCompleteReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case ORDER_COMPLETED_REQUEST:\r\n      return {\r\n        loading: true,\r\n      }\r\n    case ORDER_COMPLETED_SUCCESS:\r\n      return {\r\n        order: action.payload,\r\n        loading: false,\r\n        success: true,\r\n      }\r\n    case ORDER_COMPLETED_FAIL:\r\n      return {\r\n        loading: false,\r\n        error: action.payload,\r\n      }\r\n    // case ORDER_COMPLETED_RESET:\r\n    //   return {}\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const orderCancelReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case ORDER_CANCEL_REQUEST:\r\n      return {\r\n        loading: true,\r\n      }\r\n    case ORDER_CANCEL_SUCCESS:\r\n      return {\r\n        order: action.payload,\r\n        loading: false,\r\n        success: true,\r\n      }\r\n    case ORDER_CANCEL_FAIL:\r\n      return {\r\n        loading: false,\r\n        error: action.payload,\r\n      }\r\n    case ORDER_CANCEL_RESET:\r\n      return {}\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const orderCustomerPaidReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case ORDER_PAYMENT_DONE_REQUEST:\r\n      return {\r\n        loading: true,\r\n      }\r\n    case ORDER_PAYMENT_DONE_SUCCESS:\r\n      return {\r\n        order: action.payload,\r\n        loading: false,\r\n        success: true,\r\n      }\r\n    case ORDER_PAYMENT_DONE_FAIL:\r\n      return {\r\n        loading: false,\r\n        error: action.payload,\r\n      }\r\n    case ORDER_PAYMENT_DONE_RESET:\r\n      return {}\r\n    default:\r\n      return state\r\n  }\r\n}","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/reducers/userReducers.js",[],"/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Components/Footer.js",[],"/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Components/Header.js",[],"/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Screens/Home.js",[],"/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Screens/Menu.js",["184","185","186"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  Image as ImageComponent,\r\n  ListGroup,\r\n  Form,\r\n  Button,\r\n} from \"react-bootstrap\";\r\n\r\nimport { listEateryDetails } from \"../actions/eateryActions\";\r\nimport Loader from \"../Components/Loader\";\r\nimport Message from \"../Components/Message\";\r\nimport StarRatings from \"react-star-ratings\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport ListSubheader from \"@material-ui/core/ListSubheader\";\r\nimport List from \"@material-ui/core/List\";\r\n\r\nimport Category from \"../Components/Category\";\r\n\r\n//import axios from 'axios'\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    maxWidth: 1080,\r\n    backgroundColor: \"black\",\r\n  },\r\n  nested: {\r\n    paddingLeft: theme.spacing(4),\r\n  },\r\n}));\r\n\r\nfunction groupBy(objectArray, property) {\r\n  return objectArray.reduce((acc, obj) => {\r\n    const key = obj[property];\r\n    if (!acc[key]) {\r\n      acc[key] = [];\r\n    }\r\n    // Add object to list for given key's value\r\n    acc[key].push(obj);\r\n    return acc;\r\n  }, {});\r\n}\r\n\r\n// function to check if an image is there or not\r\n\r\nconst checkImage = (imageUrl) => {\r\n  let img = new Image();\r\n  img.src = imageUrl;\r\n  if (img.complete) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\nconst Menu = ({ match, location }) => {\r\n  // match.params.id or match.params. anything that is in the url\r\n  const redirect = location.search ? location.search.split(\"=\")[1] : null;\r\n  const dispatch = useDispatch();\r\n\r\n  const eateryDetails = useSelector((state) => state.eateryDetails); // call whatever you call in the store\r\n  const { loading, error, eatery } = eateryDetails;\r\n\r\n  useEffect(() => {\r\n    dispatch(listEateryDetails(match.params.id));\r\n  }, [dispatch, match, redirect]);\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <div>\r\n      <Link className=\"btn btn-secondary my-3\" to=\"/\">\r\n        Go Back\r\n      </Link>\r\n      {loading ? (\r\n        <Loader />\r\n      ) : error ? (\r\n        <Message variant=\"danger\">{error}</Message>\r\n      ) : (\r\n        <>\r\n          <Row>\r\n            {redirect ? null : (\r\n              <Col md={6}>\r\n                <ImageComponent\r\n                  src={\r\n                    checkImage(\r\n                      `https://sero2021.s3.ap-south-1.amazonaws.com/${eatery.image}`\r\n                    )\r\n                      ? `https://sero2021.s3.ap-south-1.amazonaws.com/${eatery.image}`\r\n                      : \"https://serobucket.s3.us-east-2.amazonaws.com/sample+eatery.jpg\"\r\n                  }\r\n                  alt={eatery.name}\r\n                  fluid\r\n                />\r\n              </Col>\r\n            )}\r\n            <Col md={6}>\r\n              <ListGroup variant=\"flush\">\r\n                <ListGroup.Item>\r\n                  <h3>{eatery.name}</h3>\r\n                </ListGroup.Item>\r\n                <ListGroup.Item>\r\n                  Description: {eatery.description}\r\n                </ListGroup.Item>\r\n                <ListGroup.Item>\r\n                  <StarRatings\r\n                    rating={eatery.rating}\r\n                    starRatedColor=\"#FFDF00\"\r\n                    starEmptyColor=\"#585858\"\r\n                    starDimension=\"2rem\"\r\n                    starSpacing=\"5px\"\r\n                  />\r\n                </ListGroup.Item>\r\n                <ListGroup.Item>\r\n                  {eatery.isOpen ? null : (\r\n                    <Message variant=\"danger\">\r\n                      Restaurant is closed, try after sometime\r\n                    </Message>\r\n                  )}\r\n                </ListGroup.Item>\r\n              </ListGroup>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <h2 className=\"menu-title py-3\">Menu</h2>\r\n          </Row>\r\n\r\n          {eatery.menu.length === 0 ? (\r\n            <div>This eatery currently does not has a menu.</div>\r\n          ) : (\r\n            <List\r\n              component=\"nav\"\r\n              aria-labelledby=\"nested-list-subheader\"\r\n              subheader={\r\n                <ListSubheader\r\n                  component=\"div\"\r\n                  id=\"nested-list-subheader\"\r\n                  style={{ color: \"white\" }}\r\n                >\r\n                  Category\r\n                </ListSubheader>\r\n              }\r\n              className={classes.root}\r\n            >\r\n              <div>{eatery.menu.length}</div>\r\n              {Object.entries(groupBy(eatery.menu, \"category\")).map(\r\n                ([key, value]) => {\r\n                  return <Category name={key} menu={value} />;\r\n                }\r\n              )}\r\n            </List>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Screens/Login.js",[],"/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Screens/Checkout.js",["187"],"import React, { useState, useEffect} from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Col,Button, Form} from 'react-bootstrap'\r\nimport {saveCustomerMeta} from '../actions/cartActions'\r\nimport FormContainer from '../Components/FormContainer'\r\nimport CheckoutSteps from '../Components/CheckoutSteps'\r\nimport {\r\n    listEateryDetails\r\n  } from '../actions/eateryActions'\r\n\r\nconst Checkout = ({history}) => {\r\n    const cart = useSelector(state=>state.cart)\r\n    const dispatch = useDispatch()\r\n    const {eateryDetails, customerMeta}=cart\r\n\r\n    const eateryDetailsFetched = useSelector((state) => state.eateryDetails)\r\n    const {eatery} = eateryDetailsFetched\r\n\r\n    const [name, setName] = useState(customerMeta.name);\r\n    const [email, setEmail] = useState(customerMeta.email);\r\n    const [phone, setPhone] = useState(customerMeta.phone);\r\n    const [paymentType, setPaymentType] = useState('Pay Now');\r\n\r\n    useEffect(() => {\r\n        dispatch(listEateryDetails(eateryDetails._id))\r\n    }, [])\r\n    const submitHandler =(e)=>{\r\n        e.preventDefault()\r\n        dispatch(saveCustomerMeta({name,email,phone,paymentType}))\r\n\r\n        console.log(paymentType)\r\n\r\n        // if(paymentType=='payLater'){\r\n        //     history.push('/orderSummary')\r\n        // }\r\n        // else{\r\n            history.push('/payment')\r\n        //}\r\n        \r\n    }\r\n    return (\r\n        <FormContainer>\r\n            <CheckoutSteps step1/>\r\n            <h2>Checkout</h2>\r\n            <Form onSubmit={submitHandler}>\r\n                <Form.Group controlId='name'>\r\n                    <Form.Label>Name</Form.Label>\r\n                    <Form.Control\r\n                        type='text'\r\n                        placeholder='Enter Name'\r\n                        value={name}\r\n                        required\r\n                        onChange={(e)=>setName(e.target.value)}\r\n                    >\r\n\r\n                    </Form.Control>\r\n                </Form.Group>\r\n                <Form.Group controlId='Email'>\r\n                    <Form.Label>Email</Form.Label>\r\n                    <Form.Control\r\n                        type='email'\r\n                        placeholder='Enter Email (optional)'\r\n                        value={email}\r\n                        \r\n                        onChange={(e)=>setEmail(e.target.value)}\r\n                    >\r\n\r\n                    </Form.Control>\r\n                </Form.Group> \r\n                <Form.Group controlId='phone'>\r\n                    <Form.Label>Phone</Form.Label>\r\n                    <Form.Control\r\n                        type='text'\r\n                        placeholder='Enter Phone'\r\n                        value={phone}\r\n                        required\r\n                        onChange={(e)=>setPhone(e.target.value)}\r\n                    >\r\n\r\n                    </Form.Control>\r\n                </Form.Group> \r\n                \r\n                <Form.Group>\r\n                    <Form.Label as='legend'>Select Method</Form.Label>\r\n                \r\n                    <Col>\r\n                    \r\n                        <Form.Check\r\n                            type='radio'\r\n                            label='Pay Now'\r\n                            id='Pay Now'\r\n                            name='paymentType'\r\n                            value='payNow'\r\n                            disabled={!eatery.payNowEnable}\r\n                            required\r\n                            onChange={(e)=>setPaymentType(e.target.value)}\r\n                        >\r\n                        </Form.Check>\r\n                        <Form.Check\r\n                            type='radio'\r\n                            label='Pay Later'\r\n                            id='Pay Later'\r\n                            name='paymentType'\r\n                            value='payLater'\r\n                            disabled={!eatery.payLaterEnable}\r\n                            onChange={(e)=>setPaymentType(e.target.value)}\r\n                        >\r\n                        </Form.Check>\r\n                    </Col>\r\n                </Form.Group>\r\n                    \r\n                \r\n                \r\n                <Button type='submit' variant='primary'>Continue</Button>  \r\n            </Form>\r\n        </FormContainer>\r\n    )\r\n}\r\n\r\nexport default Checkout\r\n","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Screens/Cart.js",["188"],"import React, { useEffect } from 'react'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Row, Col, ListGroup, Button, Card, Container} from 'react-bootstrap'\r\nimport Message from '../Components/Message'\r\nimport { addToCart, removeFromCart } from '../actions/cartActions'\r\n\r\nconst Cart = ({history,location}) => {\r\n    const cart = useSelector(state=>state.cart)\r\n    const dispatch = useDispatch()\r\n    const {cartItems,eateryDetails}=cart\r\n    let browserHistory = useHistory();\r\n\r\n    //fetch the redirect if the flow of adding products is going on.\r\n    const redirect = location.search? location.search.split('=')[1]:null\r\n    const removeFromCartHandler = (id) =>{\r\n        dispatch(removeFromCart(id,eateryDetails))\r\n    }\r\n    const addToCartHandler = (item,qty) =>{\r\n        \r\n        const item1={\r\n            _id: item.product,\r\n            name: item.name,\r\n            cost: item.cost,\r\n            category: item.category,\r\n            image: item.image,\r\n            isAvailable: item.isAvailable,\r\n        }\r\n        dispatch(addToCart(item1,eateryDetails,qty))\r\n    }\r\n    const checkoutHandler =() =>{\r\n        if(redirect){\r\n            history.push(`/payment?redirect=${redirect}`)\r\n        }\r\n        else{\r\n\r\n            history.push('/checkout')\r\n        }\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n            <Container fluid>\r\n                <Row><Button className='mt-3' onClick={()=>browserHistory.goBack()}>Go Back</Button></Row>\r\n                <Row><h3>Your Cart<small class=\"text-muted\"> from {eateryDetails.name}</small></h3></Row>\r\n                {(cartItems.length === 0 || !eateryDetails) ? (\r\n                    <Message>\r\n                        Your cart is empty  <Button><Link to='/'>Order!</Link></Button>\r\n                    </Message>\r\n                ):(\r\n                    <div>\r\n                    <Row md={1} lg={1} xl={1} noGutters={true}>   \r\n                        \r\n                        <ListGroup>\r\n                            \r\n                            {cartItems.map((item) => (\r\n                            <ListGroup.Item key={item.product}>\r\n                                <Row>\r\n                                \r\n                                <Col md={4} xs={3} mx-auto align='center'>\r\n                                    {item.name}\r\n                                </Col>\r\n                                \r\n                                <Col md={4} xs={5} mx-auto align='center'>\r\n                                <Button size='sm' className='mx-2' onClick={()=> {\r\n                                        addToCartHandler(item,item.qty-1)\r\n                                        }} disabled={item.qty===0}>\r\n                                            <i class=\"fas fa-chevron-left\"></i>\r\n                                    </Button>\r\n                                    \r\n                                    {item.qty}\r\n                                \r\n                                    <Button size='sm' className='mx-2' onClick={()=> {\r\n                                        addToCartHandler(item,item.qty+1)\r\n                                        }}>\r\n                                            <i class=\"fas fa-chevron-right\"></i>\r\n                                    </Button>\r\n                                </Col >\r\n                                <Col xs={2} md={1}  align='center'>₹{item.cost*item.qty}</Col>\r\n                                <Col md={2} xs={1} align='center'>\r\n                                    <Button\r\n                                    size='sm' mx-0\r\n                                    onClick={() => removeFromCartHandler(item.product)}\r\n                                    >\r\n                                        <i className='fas fa-trash'></i>\r\n                                    </Button>\r\n                                </Col>\r\n                                \r\n                                \r\n                                </Row>\r\n                            </ListGroup.Item>\r\n                            ))}\r\n                        </ListGroup>\r\n                    </Row>\r\n\r\n                    <Row className='my-4'>\r\n\r\n                        <Card>\r\n                        <ListGroup variant='flush'>\r\n                            <ListGroup.Item >\r\n                            <h4>\r\n                                Subtotal ({cartItems.reduce((acc, item) => acc + item.qty, 0)})\r\n                                items\r\n                            </h4>\r\n                            ₹\r\n                            {cartItems\r\n                                .reduce((acc, item) => acc + item.qty * item.cost, 0)\r\n                                .toFixed(2)}\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item>\r\n                                <Button\r\n                                    type='button'\r\n                                    className='btn-block'\r\n                                    disabled={cartItems.length === 0 || !eateryDetails}\r\n                                    onClick={checkoutHandler}\r\n                                >\r\n                                    Proceed To Checkout\r\n                                </Button>\r\n                            </ListGroup.Item>\r\n                        </ListGroup>\r\n                        </Card>\r\n                        \r\n                    </Row>\r\n                </div>\r\n                )}\r\n                \r\n            </Container>\r\n        </React.Fragment>\r\n        \r\n        \r\n    )\r\n}\r\n\r\nexport default Cart\r\n","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Screens/Register.js",[],"/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Screens/Feedback.js",["189"],"import React, { useEffect} from 'react';\r\nimport randomColor from 'randomcolor';\r\n// import { Row, Col, Container, InputGroup, FormControl } from 'react-bootstrap';\r\nimport Review from '../Components/Review';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Loader from '../Components/Loader';\r\nimport Message from '../Components/Message';\r\nimport { getEateryReviews } from '../actions/eateryActions'\r\nimport { LinkContainer } from 'react-router-bootstrap';\r\nimport {Button, Container} from 'react-bootstrap'\r\n\r\n\r\nconst Feedback = ({history}) =>{\r\n    const dispatch = useDispatch();\r\n    const userLogin = useSelector((state) => state.userLogin)\r\n    const { userInfo } = userLogin\r\n    const reviewList = useSelector(state => state.eateryReviews);\r\n    const {error, loading, reviews} = reviewList;\r\n    \r\n    useEffect(() => {\r\n        if (!userInfo) {\r\n            history.push('/login')\r\n        }\r\n        else{\r\n            if(userInfo.eatery){\r\n                dispatch(getEateryReviews(userInfo.eatery));\r\n            }\r\n        }\r\n    }, [dispatch, history, userInfo]);\r\n    \r\n    return(\r\n        <div>\r\n                <LinkContainer to='/dashboard' className='my-3'>\r\n                    <Button variant='secondary'>Back</Button>\r\n                </LinkContainer>\r\n                <h2>Feedback and Complaints</h2>\r\n            { loading? ( <Loader /> ) : error?  (<Message variant='danger'>{ error }</Message>) :\r\n            (\r\n                reviews.map((review) => {\r\n                    return(\r\n                        <Review \r\n                            name={review.name}\r\n                            email={review.email}\r\n                            comment={review.comment}\r\n                            rating={review.rating}\r\n                            color={randomColor()}\r\n                        />\r\n                    )\r\n                })\r\n            )\r\n            }\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Feedback","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Screens/Payment.js",["190"],"import React, { useState, useEffect } from 'react'\r\nimport io from 'socket.io-client'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Col,Button, ListGroup, Tab, Row} from 'react-bootstrap'\r\n// import {saveCustomerMeta} from '../actions/cartActions'\r\nimport FormContainer from '../Components/FormContainer'\r\nimport CheckoutSteps from '../Components/CheckoutSteps'\r\nimport Message from '../Components/Message'\r\nimport {createOrder, editOrder} from '../actions/orderActions'\r\nimport { Link } from 'react-router-dom'\r\nimport {ORDER_CREATE_RESET, ORDER_EDIT_RESET} from '../constants/orderConstants'\r\n\r\nlet socket\r\n\r\nconst Payment = ({history,location}) => {\r\n    const [paymentMethod, setPaymentMethod] = useState('null')\r\n  \r\n\r\n    const redirect = location.search? location.search.split('=')[1]:null\r\n\r\n\r\n    const cart = useSelector(state=>state.cart)\r\n    const {cartItems, eateryDetails, customerMeta}=cart\r\n\r\n    const dispatch = useDispatch()\r\n    \r\n    const ENDPOINT ='localhost:5000'\r\n\r\n    const orderCreate = useSelector((state) => state.orderCreate)\r\n    const { order, success, error } = orderCreate\r\n\r\n    // if the order is edited\r\n    const orderEdit = useSelector((state) => state.orderEdit)\r\n    const { order: orderEditDetails, success: successEdit, error: errorEdit } = orderEdit\r\n    \r\n    useEffect(() => {\r\n        socket =io.connect(ENDPOINT, {reconnect: true})\r\n        if(!customerMeta){\r\n            history.push('/checkout');\r\n        }\r\n        else{\r\n            if (success) {\r\n                \r\n                socket.emit('orderPlaced')\r\n                //console.log(\"Order is created but wait for confirmation\")\r\n                history.push(`/orderSummary/${order._id}`)\r\n                dispatch({ type: ORDER_CREATE_RESET })\r\n            }\r\n            if (successEdit) {\r\n                socket.emit('orderPlaced')\r\n                //console.log(\"Order is created but wait for confirmation\")\r\n                history.push(`/orderSummary/${orderEditDetails._id}?redirect=confirmAddItems`)\r\n                dispatch({ type: ORDER_EDIT_RESET })\r\n            }\r\n        }\r\n        return () => {\r\n            //socket.emit('disconnect')\r\n            socket.off()\r\n        }\r\n\r\n    }, [history, customerMeta, success, eateryDetails, ENDPOINT, successEdit])\r\n\r\n    //   Calculate prices\r\n    const addDecimals = (num) => {\r\n        return (Math.round(num * 100) / 100).toFixed(2)\r\n    }\r\n\r\n    cart.itemsPrice = addDecimals(\r\n        cartItems.reduce((acc, item) => acc + item.cost * item.qty, 0)\r\n    )\r\n\r\n    cart.taxPrice = addDecimals(Number((0.05 * cart.itemsPrice).toFixed(2)))\r\n    cart.totalPrice = (\r\n        Number(cart.itemsPrice) +\r\n        Number(cart.taxPrice)\r\n    ).toFixed(2)\r\n\r\n\r\n    \r\n    const placeOrderHandler = () => {\r\n\r\n        \r\n            if(redirect){\r\n                dispatch(\r\n                    editOrder({\r\n                        eateryId: eateryDetails._id,\r\n                        orderId: redirect,\r\n                        orderItems: cart.cartItems,\r\n                        itemsPrice: cart.itemsPrice,\r\n                        taxPrice: cart.taxPrice,\r\n                        totalPrice: cart.totalPrice,\r\n                    })\r\n                )\r\n            }\r\n            else{\r\n\r\n                dispatch(\r\n                  createOrder({\r\n                    eateryId: eateryDetails._id,\r\n                    customerMeta: {\r\n                        name: customerMeta.name,\r\n                        phone: customerMeta.phone,\r\n                        email: customerMeta.email\r\n                    },\r\n                    orderItems: cart.cartItems,\r\n                    paymentMethod: paymentMethod,\r\n                    itemsPrice: cart.itemsPrice,\r\n                    paymentType: cart.customerMeta.paymentType,\r\n                    taxPrice: cart.taxPrice,\r\n                    totalPrice: cart.totalPrice,\r\n                  })\r\n                )\r\n            }\r\n        \r\n    }\r\n\r\n\r\n    \r\n    \r\n    return (\r\n        <>\r\n            <CheckoutSteps step1 step2/>\r\n            <FormContainer>\r\n                <h2>Payment</h2>\r\n            \r\n                <ListGroup variant='flush'>\r\n                    <ListGroup.Item>\r\n                        \r\n                        <p>\r\n                            <strong>Customer Details: </strong> <br />\r\n                            {customerMeta.name}<br />\r\n                            {customerMeta.phone}\r\n                        </p>   \r\n                    </ListGroup.Item>\r\n                    <h4 className=\"py-3\">Order from <Link to={`/menu/${eateryDetails._id}`}>\r\n                            {eateryDetails.name}</Link>\r\n                    </h4>\r\n                    <ListGroup.Item>\r\n                        <Row>\r\n                        <Col>Items</Col>\r\n                        <Col>₹{cart.itemsPrice}</Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n\r\n                    <ListGroup.Item>\r\n                        <Row>\r\n                        <Col>GST</Col>\r\n                        <Col>₹{cart.taxPrice}</Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item>\r\n                        <Row>\r\n                        <Col>Total</Col>\r\n                        <Col>₹{cart.totalPrice}</Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n                    {customerMeta.paymentType==='payNow'?(\r\n                        <ListGroup.Item>\r\n                            <Tab.Container id=\"list-group-tabs-example\">\r\n                                <Row>\r\n                                    <Col sm={6}>\r\n                                    <ListGroup>\r\n                                        <ListGroup.Item action href=\"#link1\" onClick={(e)=>setPaymentMethod('UPI')}>\r\n                                        UPI\r\n                                        </ListGroup.Item>\r\n                                        <ListGroup.Item action href=\"#link2\" onClick={(e)=>setPaymentMethod('PayTM')}>\r\n                                        PayTM\r\n                                        </ListGroup.Item>\r\n                                    </ListGroup>\r\n                                    </Col>\r\n                                    <Col sm={6}>\r\n                                    <Tab.Content>\r\n                                        <Tab.Pane eventKey=\"#link1\">\r\n                                        <h6>{eateryDetails.upi}</h6>\r\n                                        </Tab.Pane>\r\n                                        <Tab.Pane eventKey=\"#link2\">\r\n                                        <h6>{eateryDetails.paytm}</h6>\r\n                                        </Tab.Pane>\r\n                                    </Tab.Content>\r\n                                    </Col>\r\n                                    \r\n                                </Row>\r\n                            </Tab.Container>\r\n                        </ListGroup.Item>\r\n                    ):(\r\n                        null\r\n                    )}\r\n                    \r\n\r\n                </ListGroup>\r\n                <ListGroup.Item>\r\n                {(error || errorEdit) && <Message variant='danger'>{error || errorEdit}</Message>}\r\n                </ListGroup.Item>\r\n                <Button\r\n                    type='button'\r\n                    className='btn-block'\r\n                    disabled={cartItems.length === 0 || !eateryDetails || (paymentMethod==='null' && cart.customerMeta.paymentType==='payNow')}\r\n                    onClick={placeOrderHandler}\r\n                >\r\n                    Place Order\r\n                </Button>         \r\n            </FormContainer>\r\n\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Payment\r\n\r\n\r\n","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Screens/UserList.js",[],"/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Screens/Dashboard.js",["191","192","193"],"/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Screens/DashboardMenu.js",["194"],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport {\r\n  Row,\r\n  Col,\r\n  Container,\r\n  Button,\r\n  ButtonGroup,\r\n  Form,\r\n  Card,\r\n} from \"react-bootstrap\";\r\nimport { LinkContainer } from \"react-router-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getUserDetails } from \"../actions/userActions\";\r\nimport { listEateryDetails, updateEatery } from \"../actions/eateryActions\";\r\n\r\nconst groupBy = (objectArray, property) => {\r\n  return objectArray.reduce((acc, obj) => {\r\n    const key = obj[property];\r\n\r\n    if (!acc[key]) {\r\n      acc[key] = [];\r\n    }\r\n    // Add object to list for given key's value\r\n    acc[key].push(obj);\r\n\r\n    return acc;\r\n  }, {});\r\n};\r\n\r\nconst DashboardMenu = ({ history }) => {\r\n  const [addItemButton, setAddItemButton] = useState(0);\r\n\r\n  const addItemButtonHandler = () => {\r\n    setAddItemButton((addItemButton + 1) % 2);\r\n  };\r\n\r\n  const [id, setId] = useState(null);\r\n  const [name, setName] = useState(\"\");\r\n  const [cost, setCost] = useState(0);\r\n  const [category, setCategory] = useState(\"\");\r\n  const [image, setImage] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [isAvailable, setIsAvailable] = useState(true);\r\n\r\n  const eateryDetails = useSelector((state) => state.eateryDetails);\r\n  const { eatery } = eateryDetails;\r\n\r\n  const userDetails = useSelector((state) => state.userDetails);\r\n  const { user } = userDetails;\r\n\r\n  const userLogin = useSelector((state) => state.userLogin);\r\n  const { userInfo } = userLogin;\r\n\r\n  const [validated, setValidated] = useState(false);\r\n\r\n  const eateryMenu = eatery?.menu || [];\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (!userInfo) {\r\n      history.push(\"/login\");\r\n    } else {\r\n      if (!user.name || user.name !== userInfo.name) {\r\n        dispatch(getUserDetails(\"profile\"));\r\n      } else {\r\n        dispatch(listEateryDetails(user.eatery));\r\n      }\r\n    }\r\n  }, [dispatch, history, user, userInfo]);\r\n\r\n  const submitHandler = (e) => {\r\n    const form = e.currentTarget;\r\n    console.log(form);\r\n    e.preventDefault();\r\n    if (form.checkValidity() == false) {\r\n      console.log(\"in the if statement\");\r\n      e.stopPropagation();\r\n      return;\r\n    }\r\n\r\n    let menu = eateryMenu;\r\n\r\n    if (id) {\r\n      menu = eateryMenu.filter((menu) => menu._id !== id);\r\n    }\r\n\r\n    menu.push({\r\n      name,\r\n      cost,\r\n      category,\r\n      image,\r\n      description,\r\n      isAvailable,\r\n    });\r\n\r\n    dispatch(updateEatery({ _id: eatery._id, menu }));\r\n\r\n    setAddItemButton(0);\r\n    setId(null);\r\n    setName(\"\");\r\n    setCost(0);\r\n    setCategory(\"\");\r\n    setImage(\"\");\r\n    setDescription(\"\");\r\n    setIsAvailable(0);\r\n    setValidated(true);\r\n  };\r\n\r\n  const deleteMenu = (ID) => () => {\r\n    let menu = eateryMenu.filter((menu) => menu._id !== ID);\r\n\r\n    dispatch(updateEatery({ _id: eatery._id, menu }));\r\n  };\r\n\r\n  const editMenu = (ID) => () => {\r\n    window.scrollTo(0, 0);\r\n\r\n    setAddItemButton(1);\r\n\r\n    let menu = eateryMenu.filter((menu) => menu._id === ID);\r\n\r\n    setId(ID);\r\n    setName(menu[0].name);\r\n    setCost(menu[0].cost);\r\n    setCategory(menu[0].category);\r\n    setImage(menu[0].image);\r\n    setDescription(menu[0].description);\r\n    setIsAvailable(menu[0].isAvailable);\r\n  };\r\n\r\n  let menu = groupBy(eateryMenu, \"category\");\r\n\r\n  menu = Object.keys(menu)\r\n    .sort()\r\n    .reduce(\r\n      (acc, key) => ({\r\n        ...acc,\r\n        [key]: menu[key],\r\n      }),\r\n      {}\r\n    );\r\n\r\n  console.log(menu);\r\n\r\n  return (\r\n    <>\r\n      <Container className=\"py-3\">\r\n        {userInfo.userType === 1 ? (\r\n          <LinkContainer to=\"/admin/eaterylist\">\r\n            <Button variant=\"secondary\">Back</Button>\r\n          </LinkContainer>\r\n        ) : (\r\n          <LinkContainer to=\"/dashboard\">\r\n            <Button variant=\"secondary\">Back</Button>\r\n          </LinkContainer>\r\n        )}\r\n\r\n        <h1>Menu</h1>\r\n        <Button onClick={addItemButtonHandler}>Add Item</Button>\r\n      </Container>\r\n\r\n      {addItemButton === 1 && (\r\n        <Container className=\"py-3\">\r\n          <Form onSubmit={submitHandler} noValidate validated={validated}>\r\n            <Form.Group controlId=\"name\">\r\n              <Form.Label>Name</Form.Label>\r\n              <Form.Control\r\n                required\r\n                type=\"text\"\r\n                placeholder=\"Enter name\"\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"cost\">\r\n              <Form.Label>Cost</Form.Label>\r\n              <Form.Control\r\n                required\r\n                type=\"text\"\r\n                placeholder=\"Enter cost\"\r\n                value={cost}\r\n                onChange={(e) => setCost(e.target.value)}\r\n                defaultValue=\"0\"\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"category\">\r\n              <Form.Label>Category</Form.Label>\r\n              <Form.Control\r\n                as=\"select\"\r\n                value={category}\r\n                placeholder=\"Select category\"\r\n                onChange={(e) => {\r\n                  setCategory(e.target.value);\r\n                }}\r\n                defaultValue=\"Starter\"\r\n              >\r\n                <option value=\"Starter\" selected>\r\n                  Starter\r\n                </option>\r\n                <option value=\"Buffet\">Buffet</option>\r\n                <option value=\"Bar\">Bar</option>\r\n                <option value=\"Dining\">Dining</option>\r\n                <option value=\"Bakery\">Bakery</option>\r\n                <option value=\"Fast Food\">Fast Food</option>\r\n              </Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"image\">\r\n              <Form.Label>Image</Form.Label>\r\n              <Form.Control\r\n                required\r\n                type=\"text\"\r\n                placeholder=\"Upload Image\"\r\n                value={image}\r\n                onChange={(e) => setImage(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"description\">\r\n              <Form.Label>Description</Form.Label>\r\n              <Form.Control\r\n                required\r\n                type=\"text\"\r\n                placeholder=\"Enter description\"\r\n                value={description}\r\n                onChange={(e) => setDescription(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"isAvailable\">\r\n              <Form.Label>Availiablity</Form.Label>\r\n              <Form.Control\r\n                type=\"checkbox\"\r\n                value={isAvailable}\r\n                onChange={(e) => setIsAvailable(e.target.value)}\r\n              ></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Button type=\"submit\" variant=\"primary\">\r\n              Add Item\r\n            </Button>\r\n          </Form>\r\n        </Container>\r\n      )}\r\n\r\n      <Container className=\"py-3\">\r\n        <Row>\r\n          {Object.keys(menu).map((key, i) => (\r\n            <Col className=\"py-3\" key={key}>\r\n              <h3>{key}</h3>\r\n              {menu[key].map((item) => (\r\n                <Row key={item.name}>\r\n                  <Card style={{ height: \"15rem\", width: \"50rem\" }}>\r\n                    <Card.Img\r\n                      variant=\"top\"\r\n                      src={item.image}\r\n                      style={{ width: \"5rem\", height: \"5rem\" }}\r\n                    />\r\n                    <Card.Body>\r\n                      <Card.Title> {item.name} </Card.Title>\r\n                      <Card.Text>{item.description}</Card.Text>\r\n                      <h6>\r\n                        {item.isAvailable ? \"Available\" : \"Not available\"}\r\n                      </h6>\r\n                      <ButtonGroup>\r\n                        <Col>\r\n                          <Button\r\n                            onClick={editMenu(item._id)}\r\n                            variant=\"warning\"\r\n                          >\r\n                            Edit\r\n                          </Button>\r\n                        </Col>\r\n                        <Col>\r\n                          <Button\r\n                            onClick={deleteMenu(item._id)}\r\n                            variant=\"warning\"\r\n                          >\r\n                            Delete\r\n                          </Button>\r\n                        </Col>\r\n                      </ButtonGroup>\r\n                    </Card.Body>\r\n                  </Card>\r\n                </Row>\r\n              ))}\r\n            </Col>\r\n          ))}\r\n          {/* {eateryMenu.map((item =>\r\n                        <Col className='py-3'>\r\n                            <Row>\r\n                                <Card style={{ height: '15rem', width: '50rem' }}>\r\n                                    <Card.Img variant=\"top\" src={item.image}\r\n                                        style={{width: '5rem', height: '5rem' }}\r\n                                    />\r\n                                    <Card.Body>\r\n                                        <Card.Title> {item.name} </Card.Title>\r\n                                        <Card.Text>\r\n                                            {item.description}\r\n                                        </Card.Text>\r\n                                        <h6>{item.isAvailable ? 'Available' : 'Not available'}</h6>\r\n                                        <ButtonGroup>\r\n                                            <Col>\r\n                                                <Button variant='warning'>Edit</Button>\r\n                                            </Col>\r\n                                            <Col>\r\n                                                <Button onClick={deleteMenu(item._id)} variant='warning'>Delete</Button>\r\n                                            </Col>\r\n                                        </ButtonGroup>\r\n                                    </Card.Body>\r\n                                </Card>\r\n                            </Row>\r\n                        </Col>\r\n                    ))} */}\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DashboardMenu;\r\n","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Screens/EateryList.js",[],"/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Screens/UserEdit.js",[],"/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Screens/MyOrderList.js",["195","196"],"import React, {useEffect } from 'react';\r\nimport { Table, Button, Row, Col } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\nimport { LinkContainer } from 'react-router-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Loader from '../Components/Loader';\r\nimport Message from '../Components/Message';\r\nimport {listMyOrders} from '../actions/orderActions'\r\n\r\nconst MyOrderList = ({ history, match }) => {\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const userLogin = useSelector((state) => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const  orderListMy = useSelector(state => state.orderListMy) \r\n    const { loading, error, orders  } = orderListMy\r\n\r\n\r\n    useEffect(() => {\r\n        if (!userInfo) {\r\n            history.push('/login')\r\n        }\r\n        else{\r\n            dispatch(listMyOrders())\r\n        }\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <>\r\n            <Row className='align-items-center'>\r\n                <Col>\r\n                    <h2>Past Orders</h2>\r\n                </Col>\r\n            </Row>\r\n\r\n            {loading ? (\r\n                <Loader /> )\r\n            : error ? (\r\n                <Message variant='danger'>{error}</Message>) \r\n            : (\r\n                <Table striped bordered hover responsive className='table-sm'>\r\n                    <thead>\r\n                        <tr>\r\n                        <th>STATUS</th>\r\n                        <th>NAME</th>\r\n                        <th>PHONE</th>\r\n                        <th>DATE</th>\r\n                        <th>TOTAL</th>\r\n                \r\n                        <th>MODE</th>\r\n                        <th>COMPLETE</th>\r\n                        <th>INFO</th>\r\n\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {orders.map((order) => (\r\n                            \r\n                                <tr key={order._id}>\r\n                                <td>{order.isPaid?<i class=\"fas fa-check-circle\"></i>:'Unpaid'}</td>\r\n                                <td>{order.customerMeta.name}</td>\r\n                                <td>{order.customerMeta.phone}</td>\r\n                                <td>{order.createdAt.substring(0,10)}</td>\r\n                                <td>₹{order.totalPrice}</td>\r\n                                \r\n                                <td>{order.paymentMethod}</td>\r\n                                <td>{order.cancelled?('Cancelled'):('Completed')}</td> \r\n                                <td><LinkContainer to={`/orderSummary/${order._id}`}>\r\n                                <Button className='btn-sm' variant='light'><i class=\"fas fa-info-circle\"></i></Button>\r\n                                    </LinkContainer>\r\n                                </td> \r\n                                {/* <td><Button className='btn-sm' variant='danger' onClick={cancelHandler(order)}>Cancel</Button></td>  */}\r\n                            </tr>\r\n                         \r\n                        \r\n                        ))}\r\n                    </tbody>\r\n                </Table>\r\n            )}  \r\n        </>\r\n    )\r\n}\r\n\r\nexport default MyOrderList","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Screens/EateryEdit.js",[],"/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Screens/OrderSummary.js",["197","198","199"],"import React, { useState, useEffect } from 'react'\r\nimport io from 'socket.io-client'\r\nimport { Link } from 'react-router-dom'\r\nimport { Row, Col, ListGroup,Card, Button,Tab, Form } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../Components/Loader';\r\nimport Message from '../Components/Message';\r\nimport {\r\n  getOrderDetails,\r\n  paymentDone,\r\n} from '../actions/orderActions'\r\nimport {\r\n  listEateryDetails,\r\n  createEateryReview\r\n} from '../actions/eateryActions'\r\nimport { ORDER_PAYMENT_DONE_RESET } from '../constants/orderConstants'\r\nimport { CART_RESET, CART_EDIT_ORDER_RESET } from '../constants/cartConstants'\r\nimport {EATERY_CREATE_REVIEW_RESET} from '../constants/eateryConstants'\r\n\r\n\r\n\r\nlet socket\r\nconst OrderSummary = ({ match, history, location}) => {\r\n  const orderId = match.params.id\r\n  //const [eateryID, setEateryID] = useState('')\r\n  //const [name, setName] = useState('')\r\n  //const [email, setEmail] = useState('')\r\n  //const [reviewDone, setReviewDone] = useState(false)\r\n  const [rating, setRating] = useState(0)\r\n  const [comment, setComment] = useState('')\r\n  const dispatch = useDispatch()\r\n\r\n  const orderDetails = useSelector((state) => state.orderDetails)\r\n  const { order, loading, error } = orderDetails\r\n\r\n  const eateryCreateReview = useSelector(state => state.eateryCreateReview)\r\n  const {success: successEateryReview, error: errorEateryReview} = eateryCreateReview\r\n\r\n  const eateryDetails = useSelector((state) => state.eateryDetails)\r\n  const {loading:eateryLoading, error: eateryError, eatery} = eateryDetails\r\n\r\n  const [paymentMethod, setPaymentMethod] = useState('null')\r\n\r\n  let redirect = location.search? location.search.split('=')[1]:null\r\n\r\n  const orderCustomerPaid = useSelector((state) => state.orderCustomerPaid)\r\n  const { loading: loadingPay, success: successPay, error: errorPay } = orderCustomerPaid\r\n\r\n  if (!loading) {\r\n    //   Calculate prices\r\n    const addDecimals = (num) => {\r\n      return (Math.round(num * 100) / 100).toFixed(2)\r\n    }\r\n\r\n    order.itemsPrice = addDecimals(\r\n      order.orderItems.reduce((acc, item) => acc + item.cost * item.qty, 0)\r\n    )\r\n    //setEateryID(order.eatery)\r\n    // setName(order.customerMeta.name)\r\n    // setEmail(order.customerMeta.email)\r\n  }\r\n\r\n  // const email = order.customerMeta.email;\r\n  // const name = order.customerMeta.name;\r\n  const ENDPOINT ='localhost:5000'\r\n\r\n  useEffect(() => {\r\n    socket =io.connect(ENDPOINT, {reconnect: true})\r\n    \r\n    if (!order  || order._id !== orderId) {\r\n      dispatch(getOrderDetails(orderId))\r\n    }  \r\n    else if(!eatery){\r\n      dispatch(listEateryDetails(order.eatery))\r\n    }\r\n    else if(redirect){\r\n      dispatch(getOrderDetails(orderId))\r\n      history.push(`/orderSummary/${orderId}`)\r\n    } \r\n    //console.log(socket)\r\n    console.log(successPay)\r\n    if(successPay){\r\n      const eateryIdforSocket=order.eatery\r\n      dispatch(getOrderDetails(orderId))\r\n      socket.emit('customerPaid',{eateryIdforSocket})\r\n      dispatch({ type: ORDER_PAYMENT_DONE_RESET }) \r\n    }\r\n\r\n\r\n\r\n    socket.on('paidOrder', ({orderPaidId})=>{\r\n      // console.log(orderPaidId)\r\n      if(orderPaidId===orderId){\r\n        // console.log('Paid for your Order')\r\n        dispatch(getOrderDetails(orderId))\r\n      }\r\n    }) \r\n    socket.on('cancelledOrder', ({orderCancelledId})=>{\r\n      // console.log(orderCancelledId)\r\n      if(orderCancelledId===orderId){\r\n        // console.log('Cancelled for your Order')\r\n        dispatch(getOrderDetails(orderId))\r\n      }\r\n    })\r\n    socket.on('completedOrder', ({orderCompletedId})=>{\r\n      // console.log(orderCompletedId)\r\n      if(orderCompletedId===orderId){\r\n        // console.log('Completed for your Order')\r\n        dispatch(getOrderDetails(orderId))\r\n        dispatch({type: CART_RESET})\r\n      }\r\n    })\r\n    \r\n    if(successEateryReview){\r\n      alert(\"Review Submitted\")\r\n      setRating(0)\r\n      setComment('')\r\n      dispatch({type: EATERY_CREATE_REVIEW_RESET})\r\n      dispatch(getOrderDetails(orderId))\r\n  }\r\n\r\n    return () => {\r\n      //socket.emit('disconnect')\r\n      socket.off()\r\n    }\r\n    \r\n  }, [dispatch, orderId, order, ENDPOINT,eatery,successPay, successEateryReview,redirect])\r\n\r\nconst reviewSubmitHandler = (e) => {\r\n  e.preventDefault()\r\n  dispatch(createEateryReview(order.eatery, {\r\n      name: order.customerMeta.name,\r\n      email: order.customerMeta.email,\r\n      phoneNumber: order.customerMeta.phone,\r\n      rating,\r\n      comment,\r\n      orderId\r\n  }))\r\n}\r\n\r\n  const paymentHandler = () =>{\r\n    dispatch(paymentDone({\r\n        _id: orderId,\r\n        paymentMethod: paymentMethod\r\n    }\r\n    ))\r\n  }\r\n\r\n  const addItemsHandler = () =>{\r\n    dispatch({type: CART_EDIT_ORDER_RESET})\r\n    history.push(`/menu/${order.eatery}?redirect=${orderId}`)\r\n  }\r\n  return loading ? (\r\n    <Loader />\r\n  ) : error ? (\r\n    <Message variant='danger'>{error}</Message>\r\n  ) : (\r\n    <>\r\n      <h2>Order Summary {order._id}</h2>\r\n      <Row>\r\n        <Col md={8}>\r\n          <ListGroup variant='flush'>\r\n            <ListGroup.Item>\r\n              <h3>Details</h3>\r\n              <Row>\r\n                <Col>\r\n                    <p>\r\n                        <strong>Name: </strong> {order.customerMeta.name}\r\n                    </p>  \r\n                </Col>\r\n                <Col>\r\n                    <p>\r\n                        <strong>Phone: </strong> {order.customerMeta.phone}\r\n                    </p> \r\n                </Col>\r\n                <Col>\r\n                    <p>\r\n                        <strong>Email: </strong> <a href={`mailto:${order.customerMeta.email}`}>{order.customerMeta.email}</a>\r\n                    </p> \r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                  <Col>\r\n                    <p>\r\n                        <strong>Eatery: </strong> <Link to={`/menu/${order.eatery}`}>\r\n                            {eatery.name}</Link>\r\n                    </p>\r\n                  </Col>\r\n              </Row>\r\n            \r\n              \r\n              {order.completed ? (\r\n                <Message variant='success'>\r\n                  Completed on {order.completedAt.substring(0,10)}\r\n                </Message>\r\n              ) : (\r\n                <Message variant='primary'>In Progress</Message>\r\n              )}\r\n              {order.cancelled ? (\r\n                <Message variant='danger'>Order Cancelled</Message>\r\n              ) : (\r\n                null\r\n              )}\r\n            </ListGroup.Item>\r\n\r\n            <ListGroup.Item>\r\n              <h3>Payment Method</h3>\r\n              <Row>\r\n                <Col>\r\n                    <p>\r\n                        <strong>Type: </strong>\r\n                        {order.paymentType}\r\n                    </p>  \r\n                </Col>\r\n                {order.paymentMethod!=='null'?(\r\n                  <Col>\r\n                      <p>\r\n                          <strong>Mode: </strong>\r\n                          {order.paymentMethod}\r\n                      </p>  \r\n                  </Col>\r\n                ):null}\r\n              </Row>\r\n              \r\n              {order.isPaid ? (\r\n                <Message variant='success'>Paid on {order.paidAt.substring(0,10)}</Message>\r\n              ) : (\r\n                <Message variant='danger'>Not Paid</Message>\r\n              )}\r\n            </ListGroup.Item>\r\n\r\n            <ListGroup.Item>\r\n              <h3>Order Items</h3>\r\n              {order.orderItems.length === 0 ? (\r\n                <Message>Order is empty</Message>\r\n              ) : (\r\n                <ListGroup variant='flush'>\r\n                  {order.orderItems.map((item, index) => (\r\n                    <ListGroup.Item key={index}>\r\n                      <Row>\r\n                        \r\n                        <Col>\r\n                            {item.name}\r\n                        </Col>\r\n                        <Col>\r\n                            {item.category}\r\n                        </Col>\r\n                        <Col md={4}>\r\n                          {item.qty} x ₹{item.cost} = ₹{item.qty * item.cost}\r\n                        </Col>\r\n                      </Row>\r\n                    </ListGroup.Item>\r\n                  ))}\r\n                  {order.paymentType==='payLater' && order.paymentMethod==='null'?(\r\n                    <Button\r\n                      type='button'\r\n                      className='btn btn-block'\r\n                      onClick={addItemsHandler}\r\n                    >\r\n                      Add Items\r\n                    </Button>\r\n                  ):\r\n                  null}\r\n                </ListGroup>\r\n              )}\r\n            </ListGroup.Item>\r\n          </ListGroup>\r\n        </Col>\r\n        <Col md={4}>\r\n          <Card>\r\n            <ListGroup variant='flush'>\r\n              <ListGroup.Item>\r\n                <h3>Order Summary</h3>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Items</Col>\r\n                  <Col>₹{order.itemsPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Tax</Col>\r\n                  <Col>₹{order.taxPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Total</Col>\r\n                  <Col>₹{order.totalPrice}</Col>\r\n                </Row>\r\n              </ListGroup.Item>\r\n              \r\n              {(order.paymentType==='payLater' && order.paymentMethod==='null')?(\r\n                <>\r\n                  <ListGroup.Item>\r\n                    Select Payment Method\r\n                    <Tab.Container id=\"list-group-tabs-example\">\r\n                        <Row>\r\n                            <Col sm={6}>\r\n                            <ListGroup>\r\n                                <ListGroup.Item action href=\"#link1\" onClick={(e)=>setPaymentMethod('UPI')}>\r\n                                UPI\r\n                                </ListGroup.Item>\r\n                                <ListGroup.Item action href=\"#link2\" onClick={(e)=>setPaymentMethod('PayTM')}>\r\n                                PayTM\r\n                                </ListGroup.Item>\r\n                            </ListGroup>\r\n                            </Col>\r\n                            <Col sm={6}>\r\n                            <Tab.Content>\r\n                                <Tab.Pane eventKey=\"#link1\">\r\n                                <h6>{eatery.upi}</h6>\r\n                                </Tab.Pane>\r\n                                <Tab.Pane eventKey=\"#link2\">\r\n                                <h6>{eatery.paytm}</h6>\r\n                                </Tab.Pane>\r\n                            </Tab.Content>\r\n                          </Col>\r\n                        </Row>\r\n                      </Tab.Container>\r\n                  </ListGroup.Item>\r\n                  \r\n                  <ListGroup.Item>\r\n                    <Button\r\n                      type='button'\r\n                      className='btn btn-block'\r\n                      onClick={()=>paymentHandler(order)}\r\n                      disabled={paymentMethod==='null' || order.cancelled}\r\n                    >\r\n                      Payment Done\r\n                    </Button>\r\n                  </ListGroup.Item>\r\n                  {loadingPay && <Loader />}\r\n                  {errorPay && <Message variant='danger'>{errorPay}</Message>}\r\n                </>\r\n\r\n                \r\n              ):(null)}\r\n              {order.completed && (\r\n                <ListGroup.Item>\r\n                  {errorEateryReview && (\r\n                    <Message variant='danger'>{errorEateryReview}</Message>\r\n                  )}\r\n                  {(successEateryReview || order.isReviewed) ? <Message variant='success'>Feedback Submitted</Message> : (\r\n                    <Form onSubmit={reviewSubmitHandler}>\r\n                    <Form.Group controlId='rating'>\r\n                      <Form.Label>Rating</Form.Label>\r\n                      <Form.Control as='select' value={rating} \r\n                       onChange={(e) => setRating(e.target.value)}>\r\n                        <option value=''>Select....</option>\r\n                        <option value='1'>1 - Poor</option>\r\n                        <option value='2'>2 - Fair</option>\r\n                        <option value='3'>3 - Good</option>\r\n                        <option value='4'>4 - Very Good</option>\r\n                        <option value='5'>5 - Excellent</option>\r\n                      </Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group controlId='comment'>\r\n                      <Form.Label>Comment</Form.Label>\r\n                      <Form.Control as='textarea' rows='3' value={comment} \r\n                       onChange={(e) => setComment(e.target.value)}></Form.Control>\r\n                    </Form.Group>\r\n                    <Button type='submit' variant='primary'>Submit</Button>\r\n                  </Form>\r\n                  )}\r\n                  \r\n                </ListGroup.Item>\r\n              )}\r\n              \r\n            </ListGroup>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default OrderSummary\r\n","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Components/Eatery.js",[],"/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Components/Loader.js",[],"/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Components/Message.js",[],"/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Components/Category.js",[],"/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Components/FormContainer.js",[],"/home/shivagupta/drive/coding/webd/sero/Sero/client/src/constants/cartConstants.js",[],"/home/shivagupta/drive/coding/webd/sero/Sero/client/src/constants/eateryConstants.js",[],"/home/shivagupta/drive/coding/webd/sero/Sero/client/src/constants/orderConstants.js",[],"/home/shivagupta/drive/coding/webd/sero/Sero/client/src/constants/userConstants.js",[],"/home/shivagupta/drive/coding/webd/sero/Sero/client/src/actions/userActions.js",[],"/home/shivagupta/drive/coding/webd/sero/Sero/client/src/actions/eateryActions.js",["200"],"import {\r\n  EATERY_LIST_REQUEST,\r\n  EATERY_LIST_SUCCESS,\r\n  EATERY_LIST_FAIL,\r\n  EATERY_DETAILS_REQUEST,\r\n  EATERY_DETAILS_SUCCESS,\r\n  EATERY_DETAILS_FAIL,\r\n  EATERY_DELETE_SUCCESS,\r\n  EATERY_DELETE_REQUEST,\r\n  EATERY_DELETE_FAIL,\r\n  EATERY_CREATE_REQUEST,\r\n  EATERY_CREATE_SUCCESS,\r\n  EATERY_CREATE_FAIL,\r\n  EATERY_UPDATE_REQUEST,\r\n  EATERY_UPDATE_SUCCESS,\r\n  EATERY_UPDATE_FAIL,\r\n  EATERY_REVIEWS_FAIL,\r\n  EATERY_REVIEWS_REQUEST,\r\n  EATERY_REVIEWS_SUCCESS,\r\n  EATERY_CREATE_REVIEW_FAIL,\r\n  EATERY_CREATE_REVIEW_REQUEST,\r\n  EATERY_CREATE_REVIEW_SUCCESS,\r\n} from \"../constants/eateryConstants\";\r\nimport axios from \"axios\";\r\nimport { logout } from \"./userActions\";\r\n\r\nexport const listEateries = () => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: EATERY_LIST_REQUEST });\r\n\r\n    const { data } = await axios.get(\"/api/eateries\");\r\n\r\n    dispatch({\r\n      type: EATERY_LIST_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: EATERY_LIST_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const listEateryDetails = (id) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: EATERY_DETAILS_REQUEST });\r\n\r\n    const { data } = await axios.get(`/api/eateries/${id}`);\r\n\r\n    dispatch({\r\n      type: EATERY_DETAILS_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: EATERY_DETAILS_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const createEateryReview =\r\n  (id, review) => async (dispatch, getState) => {\r\n    try {\r\n      dispatch({\r\n        type: EATERY_CREATE_REVIEW_REQUEST,\r\n      });\r\n\r\n      const {\r\n        userLogin: { userInfo },\r\n      } = getState();\r\n\r\n      const config = {\r\n        headers: {\r\n          //Authorization: `Bearer ${userInfo.token}`,\r\n        },\r\n      };\r\n\r\n      await axios.post(`/api/eateries/${id}/reviews`, review, config);\r\n\r\n      dispatch({\r\n        type: EATERY_CREATE_REVIEW_SUCCESS,\r\n      });\r\n    } catch (error) {\r\n      const message =\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message;\r\n\r\n      dispatch({\r\n        type: EATERY_CREATE_REVIEW_FAIL,\r\n        payload: message,\r\n      });\r\n    }\r\n  };\r\n\r\nexport const getEateryReviews = (id) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: EATERY_REVIEWS_REQUEST,\r\n    });\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.get(`/api/eateries/${id}/reviews`, config);\r\n\r\n    console.log(data);\r\n    dispatch({\r\n      type: EATERY_REVIEWS_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    const message =\r\n      error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message;\r\n\r\n    dispatch({\r\n      type: EATERY_REVIEWS_FAIL,\r\n      payload: message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const deleteEatery = (id) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: EATERY_DELETE_REQUEST,\r\n    });\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n\r\n    await axios.delete(`/api/eateries/${id}`, config);\r\n\r\n    dispatch({\r\n      type: EATERY_DELETE_SUCCESS,\r\n    });\r\n  } catch (error) {\r\n    const message =\r\n      error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message;\r\n    if (message === \"Not authorized, token failed\") {\r\n      dispatch(logout());\r\n    }\r\n    dispatch({\r\n      type: EATERY_DELETE_FAIL,\r\n      payload: message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const createEatery = () => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: EATERY_CREATE_REQUEST,\r\n    });\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.post(`/api/eateries`, {}, config);\r\n\r\n    dispatch({\r\n      type: EATERY_CREATE_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    const message =\r\n      error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message;\r\n    if (message === \"Not authorized, token failed\") {\r\n      dispatch(logout());\r\n    }\r\n    dispatch({\r\n      type: EATERY_CREATE_FAIL,\r\n      payload: message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const updateEatery = (eatery) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: EATERY_UPDATE_REQUEST,\r\n    });\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n    // console.log(`update eatery action`);\r\n    console.log(eatery);\r\n    const { data } = await axios.put(\r\n      `/api/eateries/${eatery._id}`,\r\n      eatery,\r\n      config\r\n    );\r\n\r\n    dispatch({\r\n      type: EATERY_UPDATE_SUCCESS,\r\n      payload: data,\r\n    });\r\n    dispatch({ type: EATERY_DETAILS_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    const message =\r\n      error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message;\r\n    if (message === \"Not authorized, token failed\") {\r\n      dispatch(logout());\r\n    }\r\n    dispatch({\r\n      type: EATERY_UPDATE_FAIL,\r\n      payload: message,\r\n    });\r\n  }\r\n};\r\n","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/actions/orderActions.js",["201"],"import axios from 'axios'\r\nimport { \r\n  ORDER_CANCEL_FAIL,\r\n  ORDER_CANCEL_REQUEST,\r\n  ORDER_CANCEL_SUCCESS,\r\n  ORDER_COMPLETED_FAIL,\r\n  ORDER_COMPLETED_REQUEST,\r\n  ORDER_COMPLETED_SUCCESS,\r\n  ORDER_CREATE_FAIL, \r\n  ORDER_CREATE_REQUEST, \r\n  ORDER_CREATE_SUCCESS, \r\n  ORDER_DETAILS_FAIL, \r\n  ORDER_DETAILS_REQUEST, \r\n  ORDER_DETAILS_SUCCESS, \r\n  ORDER_EDIT_FAIL, \r\n  ORDER_EDIT_REQUEST, \r\n  ORDER_EDIT_SUCCESS, \r\n  ORDER_LIST_MY_FAIL, \r\n  ORDER_LIST_MY_REQUEST, \r\n  ORDER_LIST_MY_SUCCESS,\r\n  ORDER_LIST_REQUEST,\r\n  ORDER_PAYMENT_DONE_FAIL,\r\n  ORDER_PAYMENT_DONE_REQUEST,\r\n  ORDER_PAYMENT_DONE_SUCCESS,\r\n  ORDER_PAY_FAIL,\r\n  ORDER_PAY_REQUEST,\r\n  ORDER_PAY_SUCCESS\r\n} from '../constants/orderConstants'\r\nimport { logout } from './userActions'\r\nexport const createOrder = (order) => async (dispatch) => {\r\n    try {\r\n      dispatch({\r\n        type: ORDER_CREATE_REQUEST,\r\n      })\r\n  \r\n      const { data } = await axios.post(`/api/orders`, order)\r\n  \r\n      dispatch({\r\n        type: ORDER_CREATE_SUCCESS,\r\n        payload: data,\r\n      })\r\n    } catch (error) {\r\n        \r\n      dispatch({\r\n        type: ORDER_CREATE_FAIL,\r\n        payload:\r\n            error.response && error.response.data.message\r\n            ? error.response.data.message\r\n            : error.message\r\n      })\r\n    }\r\n  }\r\n\r\n  export const getOrderDetails = (id) => async (dispatch, getState) => {\r\n    try {\r\n      dispatch({\r\n        type: ORDER_DETAILS_REQUEST,\r\n      })\r\n  \r\n      const { data } = await axios.get(`/api/orders/${id}`)\r\n  \r\n      dispatch({\r\n        type: ORDER_DETAILS_SUCCESS,\r\n        payload: data,\r\n      })\r\n    } catch (error) {\r\n     \r\n      \r\n      dispatch({\r\n        type: ORDER_DETAILS_FAIL,\r\n        payload:\r\n        error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message,\r\n      })\r\n    }\r\n  }\r\n  \r\n  export const listMyOrders = () => async (dispatch, getState) => {\r\n    try {\r\n      dispatch({\r\n        type: ORDER_LIST_MY_REQUEST,\r\n      })\r\n  \r\n      const {\r\n        userLogin: { userInfo },\r\n      } = getState()\r\n      \r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${userInfo.token}`,\r\n        },\r\n      }\r\n  \r\n      const { data } = await axios.get(`/api/orders/myorders`, config)\r\n  \r\n      dispatch({\r\n        type: ORDER_LIST_MY_SUCCESS,\r\n        payload: data,\r\n      })\r\n    } catch (error) {\r\n      const message =\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message\r\n      if (message === 'Not authorized, token failed') {\r\n        dispatch(logout())\r\n      }\r\n      dispatch({\r\n        type: ORDER_LIST_MY_FAIL,\r\n        payload: message,\r\n      })\r\n    }\r\n  }\r\n\r\n  export const payOrder = (order) => async (dispatch, getState) => {\r\n    try {\r\n      dispatch({\r\n        type: ORDER_PAY_REQUEST,\r\n      })\r\n  \r\n      const {\r\n        userLogin: { userInfo },\r\n      } = getState()\r\n  \r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${userInfo.token}`,\r\n        },\r\n      }\r\n  \r\n      const { data } = await axios.put(\r\n        `/api/orders/${order._id}/pay`,\r\n        {},\r\n        config\r\n      )\r\n  \r\n      dispatch({\r\n        type: ORDER_PAY_SUCCESS,\r\n        payload: data,\r\n      })\r\n    } catch (error) {\r\n      const message =\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message\r\n      if (message === 'Not authorized, token failed') {\r\n        dispatch(logout())\r\n      }\r\n      dispatch({\r\n        type: ORDER_PAY_FAIL,\r\n        payload: message,\r\n      })\r\n    }\r\n  }\r\n\r\nexport const completeOrder = (order) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: ORDER_COMPLETED_REQUEST,\r\n    })\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState()\r\n\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    }\r\n\r\n    const { data } = await axios.put(\r\n      `/api/orders/${order._id}/complete`,\r\n      {},\r\n      config\r\n    )\r\n\r\n    dispatch({\r\n      type: ORDER_COMPLETED_SUCCESS,\r\n      payload: data,\r\n    })\r\n  } catch (error) {\r\n    const message =\r\n      error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message\r\n    if (message === 'Not authorized, token failed') {\r\n      dispatch(logout())\r\n    }\r\n    dispatch({\r\n      type: ORDER_COMPLETED_FAIL,\r\n      payload: message,\r\n    })\r\n  }\r\n}\r\n\r\nexport const cancelOrder = (order) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: ORDER_CANCEL_REQUEST,\r\n    })\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState()\r\n\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    }\r\n\r\n    const { data } = await axios.put(\r\n      `/api/orders/${order._id}/cancel`,\r\n      {},\r\n      config\r\n    )\r\n\r\n    dispatch({\r\n      type: ORDER_CANCEL_SUCCESS,\r\n      payload: data,\r\n    })\r\n  } catch (error) {\r\n    const message =\r\n      error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message\r\n    if (message === 'Not authorized, token failed') {\r\n      dispatch(logout())\r\n    }\r\n    dispatch({\r\n      type: ORDER_CANCEL_FAIL,\r\n      payload: message,\r\n    })\r\n  }\r\n}\r\n\r\nexport const paymentDone = (order) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: ORDER_PAYMENT_DONE_REQUEST,\r\n    })\r\n\r\n    const { data } = await axios.put(`/api/orders/${order._id}/customerPayment`, order)\r\n\r\n    dispatch({\r\n      type: ORDER_PAYMENT_DONE_SUCCESS,\r\n      payload: data,\r\n    })\r\n  } catch (error) {\r\n    const message =\r\n      error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message\r\n    \r\n    dispatch({\r\n      type: ORDER_PAYMENT_DONE_FAIL,\r\n      payload: message,\r\n    })\r\n  }\r\n}\r\n\r\nexport const editOrder = (order) => async (dispatch) => {\r\n  try {\r\n    dispatch({\r\n      type: ORDER_EDIT_REQUEST,\r\n    })\r\n\r\n    const { data } = await axios.put(`/api/orders/${order.orderId}`, order)\r\n\r\n    dispatch({\r\n      type: ORDER_EDIT_SUCCESS,\r\n      payload: data,\r\n    })\r\n  } catch (error) {\r\n      \r\n    dispatch({\r\n      type: ORDER_EDIT_FAIL,\r\n      payload:\r\n          error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message\r\n    })\r\n  }\r\n}\r\n\r\n// export const listOrders = () => async(dispatch) => {\r\n//   try {\r\n//       dispatch({ type: ORDER_LIST_REQUEST})\r\n\r\n//       const {data} = await axios.get('/api/orders')\r\n\r\n//       dispatch({\r\n//           type: EATERY_LIST_SUCCESS,\r\n//           payload: data\r\n//       })\r\n\r\n//   }\r\n//   catch(error){\r\n//       dispatch({\r\n//           type: EATERY_LIST_FAIL, \r\n//           payload: error.response && error.response.data.message ? error.response.data.message : error.message\r\n//       })\r\n//   }\r\n// }","/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Components/CheckoutSteps.js",[],"/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Components/Review.js",[],"/home/shivagupta/drive/coding/webd/sero/Sero/client/src/actions/cartActions.js",[],"/home/shivagupta/drive/coding/webd/sero/Sero/client/src/Components/Item.js",["202","203"],"import { disable } from 'colors';\r\nimport '../index.css';\r\nimport React, {useState} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux' \r\nimport {Row,Button} from 'react-bootstrap'\r\nimport {addToCart} from '../actions/cartActions'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 10,\r\n      width: '100%'\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      margin: 'auto',\r\n      width: '90%',\r\n      height: 'auto',\r\n      backgroundColor: 'black',\r\n      color: 'white'\r\n      \r\n    },\r\n    image: {\r\n      width: 128,\r\n      height: 100,\r\n    },\r\n    img: {\r\n      margin: 'auto',\r\n      display: 'block',\r\n      maxWidth: '100%',\r\n      maxHeight: '100%',\r\n    },\r\n  }));\r\n\r\nconst Item = ({item,eateryDetailProp}) => {\r\n    \r\n    const cart = useSelector(state=>state.cart)\r\n    const {cartItems,eateryDetails}=cart\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles();\r\n    const handleClick = (quantity) =>{\r\n        \r\n        dispatch(addToCart(item,eateryDetailProp,quantity))\r\n    }\r\n    var existingQty=0\r\n    if(eateryDetails._id==eateryDetailProp._id){\r\n        const existItem  = cartItems.find(x=>x.product === item._id)\r\n        if(existItem){\r\n            existingQty=existItem.qty\r\n        }\r\n        \r\n\r\n    }\r\n    const [qty,setQty]=useState(existingQty)\r\n    return (\r\n        <div className={classes.root}>\r\n            <Paper className={classes.paper}>\r\n                <Grid container spacing={2}>\r\n                <Grid item>\r\n                    \r\n                </Grid>\r\n                <Grid item xs={12} sm container>\r\n                    <Grid item xs container direction=\"column\" spacing={2}>\r\n                    <Grid item xs>\r\n                        <Typography gutterBottom>\r\n                        {item.name} <div class=\"badge badge-danger ml-2\">{item.isAvailable? null: 'Unavailable'}</div> \r\n                        </Typography>\r\n                        <Typography variant=\"body2\" gutterBottom>\r\n                        {item.description}\r\n                        </Typography>\r\n                        \r\n                    </Grid>\r\n                    \r\n                    </Grid>\r\n                    <Grid item>\r\n                    <Typography align='right' >₹{item.cost}</Typography>\r\n                    <Typography >\r\n                        <Row><Button className='mx-3' size='sm' onClick={()=> {\r\n                        setQty(qty-1)\r\n                        handleClick(qty-1)\r\n                        }} disabled={!eateryDetailProp.isOpen || qty<=0 || !item.isAvailable }>\r\n                            <i class=\"fas fa-chevron-left\"></i>\r\n                        </Button>\r\n                        \r\n                        <Typography>{qty}</Typography>\r\n                    \r\n                        <Button className='mx-3' size='sm' onClick={()=> {\r\n                            setQty(qty+1)\r\n                            handleClick(qty+1)\r\n                            }} disabled={!eateryDetailProp.isOpen || !item.isAvailable}>\r\n                                <i class=\"fas fa-chevron-right\"></i>\r\n                        </Button></Row>\r\n                        \r\n                    </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n        \r\n        \r\n    );\r\n}\r\n\r\nexport default Item;",{"ruleId":"204","replacedBy":"205"},{"ruleId":"206","replacedBy":"207"},{"ruleId":"208","severity":1,"message":"209","line":2,"column":8,"nodeType":"210","messageId":"211","endLine":2,"endColumn":16},{"ruleId":"208","severity":1,"message":"212","line":1,"column":223,"nodeType":"210","messageId":"211","endLine":1,"endColumn":244},{"ruleId":"208","severity":1,"message":"213","line":1,"column":28,"nodeType":"210","messageId":"211","endLine":1,"endColumn":36},{"ruleId":"208","severity":1,"message":"214","line":9,"column":3,"nodeType":"210","messageId":"211","endLine":9,"endColumn":7},{"ruleId":"208","severity":1,"message":"215","line":10,"column":3,"nodeType":"210","messageId":"211","endLine":10,"endColumn":9},{"ruleId":"216","severity":1,"message":"217","line":26,"column":8,"nodeType":"218","endLine":26,"endColumn":10,"suggestions":"219"},{"ruleId":"208","severity":1,"message":"220","line":1,"column":17,"nodeType":"210","messageId":"211","endLine":1,"endColumn":26},{"ruleId":"208","severity":1,"message":"221","line":10,"column":17,"nodeType":"210","messageId":"211","endLine":10,"endColumn":26},{"ruleId":"216","severity":1,"message":"222","line":61,"column":8,"nodeType":"218","endLine":61,"endColumn":78,"suggestions":"223"},{"ruleId":"208","severity":1,"message":"224","line":77,"column":12,"nodeType":"210","messageId":"211","endLine":77,"endColumn":25},{"ruleId":"208","severity":1,"message":"225","line":85,"column":12,"nodeType":"210","messageId":"211","endLine":85,"endColumn":23},{"ruleId":"216","severity":1,"message":"226","line":131,"column":6,"nodeType":"218","endLine":141,"endColumn":4,"suggestions":"227"},{"ruleId":"228","severity":1,"message":"229","line":77,"column":30,"nodeType":"230","messageId":"231","endLine":77,"endColumn":32},{"ruleId":"208","severity":1,"message":"232","line":3,"column":10,"nodeType":"210","messageId":"211","endLine":3,"endColumn":14},{"ruleId":"216","severity":1,"message":"233","line":28,"column":8,"nodeType":"218","endLine":28,"endColumn":10,"suggestions":"234"},{"ruleId":"208","severity":1,"message":"235","line":40,"column":18,"nodeType":"210","messageId":"211","endLine":40,"endColumn":31},{"ruleId":"208","severity":1,"message":"236","line":40,"column":40,"nodeType":"210","messageId":"211","endLine":40,"endColumn":51},{"ruleId":"216","severity":1,"message":"237","line":127,"column":6,"nodeType":"218","endLine":127,"endColumn":90,"suggestions":"238"},{"ruleId":"208","severity":1,"message":"239","line":77,"column":22,"nodeType":"210","messageId":"211","endLine":77,"endColumn":30},{"ruleId":"208","severity":1,"message":"240","line":21,"column":3,"nodeType":"210","messageId":"211","endLine":21,"endColumn":21},{"ruleId":"208","severity":1,"message":"241","line":1,"column":10,"nodeType":"210","messageId":"211","endLine":1,"endColumn":17},{"ruleId":"228","severity":1,"message":"229","line":50,"column":25,"nodeType":"230","messageId":"231","endLine":50,"endColumn":27},"no-native-reassign",["242"],"no-negated-in-lhs",["243"],"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","'ORDER_COMPLETED_RESET' is defined but never used.","'useState' is defined but never used.","'Form' is defined but never used.","'Button' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'eateryDetails._id'. Either include them or remove the dependency array.","ArrayExpression",["244"],"'useEffect' is defined but never used.","'Container' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'order._id', and 'orderEditDetails._id'. Either include them or remove the dependency array.",["245"],"'errorComplete' is assigned a value but never used.","'errorCancel' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'orderCancelled._id', 'orderCompleted._id', and 'orderPaid._id'. Either include them or remove the dependency array.",["246"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Link' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'history', and 'userInfo'. Either include them or remove the dependency array.",["247"],"'eateryLoading' is assigned a value but never used.","'eateryError' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["248"],"'userInfo' is assigned a value but never used.","'ORDER_LIST_REQUEST' is defined but never used.","'disable' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"249","fix":"250"},{"desc":"251","fix":"252"},{"desc":"253","fix":"254"},{"desc":"255","fix":"256"},{"desc":"257","fix":"258"},"Update the dependencies array to be: [dispatch, eateryDetails._id]",{"range":"259","text":"260"},"Update the dependencies array to be: [history, customerMeta, success, eateryDetails, ENDPOINT, successEdit, order._id, dispatch, orderEditDetails._id]",{"range":"261","text":"262"},"Update the dependencies array to be: [dispatch, history, userInfo, user, success, ENDPOINT, successPay, successComplete, successCancel, orderPaid._id, orderCancelled._id, orderCompleted._id]",{"range":"263","text":"264"},"Update the dependencies array to be: [dispatch, history, userInfo]",{"range":"265","text":"266"},"Update the dependencies array to be: [dispatch, orderId, order, ENDPOINT, eatery, successPay, successEateryReview, redirect, history]",{"range":"267","text":"268"},[1024,1026],"[dispatch, eateryDetails._id]",[2235,2305],"[history, customerMeta, success, eateryDetails, ENDPOINT, successEdit, order._id, dispatch, orderEditDetails._id]",[4045,4194],"[dispatch, history, userInfo, user, success, ENDPOINT, successPay, successComplete, successCancel, orderPaid._id, orderCancelled._id, orderCompleted._id]",[881,883],"[dispatch, history, userInfo]",[4159,4243],"[dispatch, orderId, order, ENDPOINT, eatery, successPay, successEateryReview, redirect, history]"]